/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
* {
  margin: 0;
  padding: 0;
  font: inherit;
  box-sizing: border-box;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: baseline;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-focus-ring-color: rgba(255,255,255,0);
  cursor: default;
}
body {
  font-size: 100%;
  line-height: 1;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}
a {
  background: transparent;
}
*:focus,
*:active,
*:hover {
  outline: none;
}
hr {
  box-sizing: content-box;
  height: 0;
}
ol,
ul {
  list-style: none;
}
pre {
  -moz-tab-size: 4;
       tab-size: 4;
  white-space: pre-wrap;
}
q {
  quotes: '\201C' '\201D' '\2018' '\2019';
}
img {
  border: none;
}
svg:not(:root) {
  overflow: hidden;
}
button,
input {
  line-height: normal;
}
button,
select {
  text-transform: none;
}
button {
  overflow: visible;
}
button,
html input[type='button'],
input[type='reset'],
input[type='submit'] {
  -webkit-appearance: button;
  cursor: pointer;
}
button[disabled],
html input[disabled] {
  cursor: default;
}
input[type='checkbox'],
input[type='radio'] {
  box-sizing: border-box;
}
input[type='number']::-webkit-inner-spin-button,
input[type='number']::-webkit-outer-spin-button {
  height: auto;
}
input[type='search'] {
  -webkit-appearance: textfield;
  box-sizing: content-box;
}
input[type='search']::-webkit-search-cancel-button,
input[type='search']::-webkit-search-decoration {
  -webkit-appearance: none;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: none;
  padding: 0;
}
textarea {
  overflow: auto;
  vertical-align: top;
}
button,
input,
select[multiple],
textarea {
  background-image: none;
}
input,
select,
textarea {
  border-radius: 0;
  box-shadow: none;
}
input,
textarea {
  resize: none;
  -webkit-user-select: text;
     -moz-user-select: text;
      -ms-user-select: text;
          user-select: text;
}
[placeholder]:focus::-webkit-input-placeholder {
  color: transparent;
}
[placeholder]:focus::-moz-placeholder {
  color: transparent;
}
[placeholder]:focus:-ms-input-placeholder {
  color: transparent;
}
[placeholder]:focus::placeholder {
  color: transparent;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
body,
header,
.container {
  margin: 0 auto;
  padding: 0;
  font-size: 18px;
}
body {
  background: #797979;
  font-family: 'PT Sans', sans-serif;
}
.container {
  width: 1000px;
  background-image: url("../images/background-container.png");
  padding: 70px 117px 75px 114px;
}
header {
  height: 110px;
}
.img-csssr-logo {
  float: left;
  position: relative;
  width: 150px;
  height: 100px;
}
.img-csssr-logo:before {
  content: '';
  background: url("../../assets/images/logo-csssr.png") no-repeat center center;
  position: absolute;
  width: 150px;
  height: 100px;
}
.img-top-secret {
  float: right;
  position: relative;
  width: 280px;
  height: 110px;
}
.img-top-secret:before {
  content: '';
  background: url("../../assets/images/img-top-secret.png") no-repeat center center;
  position: absolute;
  width: 280px;
  height: 110px;
  left: 76px;
}
.img-main-title {
  position: relative;
  height: 115px;
  margin: 20px 240px 57px;
}
.img-main-title:before {
  content: '';
  background: url("../../assets/images/img-main-title.png") no-repeat center center;
  position: absolute;
  width: 220px;
  height: 115px;
}
.main-data__wrap {
  margin-bottom: 30px;
  height: 33px;
  position: relative;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: start;
      justify-content: flex-start;
  -ms-flex-direction: row;
      flex-direction: row;
  background: url("../../assets/images/main-data__line.png") no-repeat;
}
.main-data__title {
  padding-right: 20px;
  font-size: 22px;
  font-weight: 800;
  position: relative;
  top: 7px;
  background-image: url("../images/background-container.png");
}
.main-data__text {
  float: left;
  padding: 0 6px 0px 0;
  display: inline-block;
  position: relative;
}
.main-data__text p {
  padding-left: 15px;
  padding-bottom: 14px;
  font-family: "Courier New", Courier, monospace;
  font-size: 24px;
  font-weight: 500;
  font-weight: 500;
}
.skill-data__title {
  font-size: 22px;
  font-weight: 800;
  margin-top: 70px;
  margin-bottom: 16px;
}
.skill-data p {
  font-size: 14px;
  color: #3d3d3d;
  line-height: 19px;
  letter-spacing: 0.5px;
}
.skill-data__form {
  margin-top: 35px;
  margin-left: 25px;
  display: inline-block;
  width: 100%;
}
.skill-data__block {
  width: 32%;
  float: left;
}
.skill-data__block__wrap {
  margin-bottom: 15px;
}
.skill-data__block__label {
  font-size: 22px;
  font-weight: 800;
  position: relative;
}
.skill-data__block__label:before {
  content: '';
  background: url("../images/sprites/icons.png");
  background-position: -31px -51px;
  width: 19px;
  height: 20px;
  position: absolute;
  left: -25px;
}
.skill-data__block__input {
  display: none;
}
.skill-data__block__input[type="checkbox"]:checked + .skill-data__block__label:before {
  width: 19px;
  height: 20px;
  background-position: -2px -51px;
}
#all {
  position: relative;
  top: 3px;
}
#OK {
  position: relative;
  top: 6px;
}
.js-bar__title {
  font-size: 22px;
  font-weight: 800;
  margin-top: 70px;
  margin-bottom: 40px;
}
.js-bar__block {
  padding-top: 15px;
  display: inline-block;
  position: relative;
  width: 100%;
}
.js-bar__text {
  padding-bottom: 14px;
  font-size: 14px;
  font-weight: 700;
  width: 180px;
  display: inline-block;
  vertical-align: top;
  position: absolute;
}
.js-bar__text__0 {
  left: 0;
}
.js-bar__text__25 {
  left: 19%;
}
.js-bar__text__50 {
  left: 49%;
}
.js-bar__text__100 {
  left: 81%;
}
.js-bar .ui-widget-content {
  border: none;
  height: 30px;
  background: url("../../assets/images/js-bar--line.png") center center no-repeat;
  background-position: -5px -25px;
}
.js-bar .ui-widget.ui-widget-content {
  border: none;
}
.js-bar .ui-widget-content .ui-state-default {
  top: -0.8em;
  background: url("../images/sprites/icons.png");
  background-position: -55px -53px;
  border: none;
  cursor: pointer;
}
.plans__title {
  font-size: 22px;
  font-weight: 800;
  margin-top: 70px;
  margin-bottom: 16px;
}
.plans p {
  font-size: 14px;
  color: #3d3d3d;
  line-height: 19px;
  letter-spacing: 0.5px;
}
.plans__form {
  margin: 20px 0 0 30px;
}
.plans__input {
  display: none;
}
.plans__input[type="radio"]:checked + .plans__label:before {
  width: 27px;
  height: 29px;
  background-position: -57px -7px;
}
.plans__label {
  font-size: 22px;
  font-weight: 800;
  position: relative;
  margin-right: 40px;
}
.plans__label:before {
  content: '';
  background: url("../images/sprites/icons.png");
  background-position: -8px -7px;
  width: 27px;
  height: 29px;
  position: absolute;
  left: -30px;
  top: -2px;
}
.about__title {
  font-size: 22px;
  font-weight: 800;
  margin-top: 70px;
  margin-bottom: 16px;
}
.about__text p {
  font-size: 14px;
  color: #3d3d3d;
  line-height: 19px;
  letter-spacing: 0.5px;
}
.about__story {
  margin-top: 5px;
  background: url("../../assets/images/js-bar.png") 0 26px;
  background-position-x: -7px;
  line-height: 60px;
}
.about__story p {
  width: 100%;
  margin-top: 25px;
  padding-left: 7px;
  font-family: "Courier New", Courier, monospace;
  font-size: 24px;
  font-weight: 500;
}
.date__wrap {
  margin-top: 85px;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: start;
      justify-content: flex-start;
  -ms-flex-direction: row;
      flex-direction: row;
}
.date__title {
  font-size: 22px;
  font-weight: 800;
  margin-bottom: 16px;
  position: relative;
  top: 7px;
}
.date__text {
  margin-bottom: 30px;
  height: 33px;
  background: url("../../assets/images/main-data__line.png");
  padding: 0 16px;
}
.date__text p {
  padding-bottom: 14px;
  font-family: "Courier New", Courier, monospace;
  font-size: 24px;
  font-weight: 500;
  font-weight: 500;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
